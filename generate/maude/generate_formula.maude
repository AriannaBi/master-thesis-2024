

mod gen_formula is
   protecting BOOL .
   sort Formula .

   --- atomic propositions
   ops "a" "b" "c" "d" "e" "f" true false : -> Formula .
   ops s=0 s=1 s=2 s=3 s=4 s=5 s=6 : -> Formula .
   ops s!=0 s!=1 s!=2 s!=3 s!=4 s!=5 s!=6 : -> Formula .

   op X : Formula -> Formula . ---    next
   op ! : Formula -> Formula . ---    not
   op F : Formula -> Formula . ---    eventually
   op G : Formula -> Formula . ---    always

   op M1 : -> Formula .
   op M2 : -> Formula .
   op M3 : -> Formula .
   op M4 : -> Formula .

   --- op (_)&(_) : Formula Formula -> Formula . --- remember parenthesis when running output for PRISM
   op (_)&(_) : Formula Formula -> Formula . ---    and
   op (_)|(_) : Formula Formula -> Formula . ---    or
   op (_)U(_) : Formula Formula -> Formula . ---    until
   op _=>_ : Formula Formula -> Formula . ---    implication
   op _<=>_ : Formula Formula -> Formula . ---    implication
   
   vars M : Formula .

   --- Formula operators
   rl [next] : M => X(M) .
   rl [not] : M => !(M) .
   rl [always] : M => G(M) .
   rl [eventually] : M => F(M) .

   rl [and] : M => (M) & (M) .
   rl [or] : M => (M) | (M) .
   rl [until] : M => (M) U (M) .

   ---   Atomic operators
   rl [a] : M => "a" .
   rl [b] : M => "b" .
   rl [b] : M => "c" .
   rl [s=0] : M => s=0 .
   rl [s=1] : M => s=1 .
   rl [s=2] : M => s=2 .
   rl [s!=0] : M => s!=0 .


   --- Next
   --- rl [next1] : M => X(M) .
   --- rl [next2] : M => X(M1) .
   --- rl [next3] : M => X(M2) .
   --- rl [next4] : M => X(M3) .

   --- rl [next2] : M1 => X(M1) .
   --- rl [next3] : M2 => X(M2) .
   --- rl [next4] : M3 => X(M3) .
   --- rl [next5] : M4 => X(M4) .

   --- --- Not
   --- rl [not1] : M => !(M) .
   --- rl [not2] : M1 => !(M1) .
   --- rl [not3] : M2 => !(M2) .
   --- rl [not4] : M3 => !(M3) .


   --- --- Always
   --- rl [always1] : M => G(M) .
   --- rl [always2] : M1 => G(M1) .
   --- rl [always3] : M2 => G(M2) .
   --- rl [always4] : M3 => G(M3) .


   --- --- Eventually
   --- rl [eventually1] : M => F(M) .
   --- rl [eventually2] : M1 => F(M1) .
   --- rl [eventually3] : M2 => F(M2) .
   --- rl [eventually4] : M3 => F(M3) .

  
   --- --- And
   --- rl [and1] : M => (M1) & (M2) .
   --- --- rl [and2] : M => (M2) & (M1) .

   --- rl [and3] : M1 => (M2) & (M3) .
   --- --- rl [and4] : M1 => (M3) & (M2) .

   --- rl [and5] : M2 => (M3) & (M4) .
   --- --- rl [and6] : M2 => (M4) & (M3) .


   --- --- Or
   --- rl [or1] : M => (M1) | (M2) .
   --- --- rl [or2] : M => (M2) | (M1) .

   --- rl [or3] : M1 => (M2) | (M3) .
   --- --- rl [or4] : M1 => (M3) | (M2) .

   --- rl [or5] : M2 => (M3) | (M4) .
   --- --- rl [or6] : M2 => (M4) | (M3) .


   --- --- Until
   --- rl [until1] : M => (M1) U (M2) .
   --- --- rl [until2] : M => (M2) U (M1) .

   --- rl [until3] : M1 => (M2) U (M3) .
   --- --- rl [until4] : M1 => (M3) U (M2) .

   --- rl [until5] : M2 => (M3) & (M4) .
   --- --- rl [until6] : M2 => (M4) & (M3) .

   --- ---   Atomic operators
   --- rl [a] : M => "a" .
   --- rl [b] : M => "b" .
   --- rl [s=0] : M => s=0 .
   --- rl [s=1] : M => s=1 .
   --- rl [s=2] : M => s=2 .
   --- rl [s=2] : M => s=3 .
   --- rl [s!=0] : M => s!=0 .
   --- rl [s!=1] : M => s!=1 .
   --- rl [s!=2] : M => s!=2 .

   --- rl [a] : M1 => "a" .
   --- rl [b] : M1 => "b" .
   --- rl [s=0] : M1 => s=0 .
   --- rl [s=1] : M1 => s=1 .
   --- rl [s=2] : M1 => s=2 .
   --- rl [s!=0] : M1 => s!=0 .
   --- rl [s!=1] : M1 => s!=1 .
   --- rl [s!=2] : M1 => s!=2 .

   --- rl [a] : M2 => "a" .
   --- rl [b] : M2 => "b" .
   --- rl [s=0] : M2 => s=0 .
   --- rl [s=1] : M2 => s=1 .
   --- rl [s=2] : M2 => s=2 .
   --- rl [s!=0] : M2 => s!=0 .
   --- rl [s!=1] : M2 => s!=1 .
   --- rl [s!=2] : M2 => s!=2 .

   --- rl [a] : M3 => "a" .
   --- rl [b] : M3 => "b" .
   --- rl [s=0] : M3 => s=0 .
   --- rl [s=1] : M3 => s=1 .
   --- rl [s=2] : M3 => s=2 .
   --- rl [s!=0] : M3 => s!=0 .
   --- rl [s!=1] : M3 => s!=1 .
   --- rl [s!=2] : M3 => s!=2 .


endm






--- mod insert_ap is
---    protecting BOOL .
---    sort Formula .

---    --- atomic propositions
---    ops "a" "b" "c" "d" "e" "f" true false : -> Formula .
---    ops s=0 s=1 s=2 s=3 s=4 s=5 s=6 : -> Formula .
---    ops s!=0 s!=1 s!=2 s!=3 s!=4 s!=5 s!=6 : -> Formula .

---    op M1 : -> Formula .
---    op M2 : -> Formula .
---    op M3 : -> Formula .
---    op M4 : -> Formula .


---    op X : Formula -> Formula . ---    next
---    op ! : Formula -> Formula . ---    not
---    op F : Formula -> Formula . ---    eventually
---    op G : Formula -> Formula . ---    always

---    op M1 : -> Formula .
---    op M2 : -> Formula .
---    op M3 : -> Formula .
---    op M4 : -> Formula .
---    --- op M : -> Formula .

---    --- op (_)&(_) : Formula Formula -> Formula . --- remember parenthesis when running output for PRISM
---    op _&_ : Formula Formula -> Formula . ---    and
---    op _|_ : Formula Formula -> Formula . ---    or
---    op _U_ : Formula Formula -> Formula . ---    until
---    op _=>_ : Formula Formula -> Formula . ---    implication
---    op _<=>_ : Formula Formula -> Formula . ---    implication
   
---    vars M : Formula .

---    --- Atomic operators
---    rl [a] : M => "a" .
---    rl [b] : M => "b" .
---    rl [s=0] : M => s=0 .
---    rl [s=1] : M => s=1 .
---    rl [s=2] : M => s=2 .
---    rl [s=2] : M => s=3 .
---    --- rl [a] : M => "a" .
---    --- rl [b] : M => "b" .
---    --- rl [s=0] : M => s=0 .
---    --- rl [s=1] : M => s=1 .
---    --- rl [s=2] : M => s=2 .
---    --- rl [s!=0] : M => s!=0 .
---    --- rl [s!=1] : M => s!=1 .
---    --- rl [s!=2] : M => s!=2 .

---    --- rl [a] : M1 => "a" .
---    --- rl [b] : M1 => "b" .
---    --- rl [s=0] : M1 => s=0 .
---    --- rl [s=1] : M1 => s=1 .
---    --- rl [s=2] : M1 => s=2 .
---    --- rl [s!=0] : M1 => s!=0 .
---    --- rl [s!=1] : M1 => s!=1 .
---    --- rl [s!=2] : M1 => s!=2 .

---    --- rl [a] : M2 => "a" .
---    --- rl [b] : M2 => "b" .
---    --- rl [s=0] : M2 => s=0 .
---    --- rl [s=1] : M2 => s=1 .
---    --- rl [s=2] : M2 => s=2 .
---    --- rl [s!=0] : M2 => s!=0 .
---    --- rl [s!=1] : M2 => s!=1 .
---    --- rl [s!=2] : M2 => s!=2 .

---    --- rl [a] : M3 => "a" .
---    --- rl [b] : M3 => "b" .
---    --- rl [s=0] : M3 => s=0 .
---    --- rl [s=1] : M3 => s=1 .
---    --- rl [s=2] : M3 => s=2 .
---    --- rl [s!=0] : M3 => s!=0 .
---    --- rl [s!=1] : M3 => s!=1 .
---    --- rl [s!=2] : M3 => s!=2 .


--- endm


--- --- M : M M
---    --- rl [next_M_M] : M => X(M) .
---    --- rl [and_M_M] : M => (M) & (M) .

--- --- M1 : M1 M1
---    --- rl [next_M_M] : M1 => X(M1) .
---    --- rl [and_M_M] : M1 => (M1) & (M1) .

--- --- M2 : M2 M2
---    --- rl [next_M_M] : M2 => X(M2) .
---    --- rl [and_M_M] : M2 => (M2) & (M2) . 


--- --- M : M1 M2 / M : M2 M1
---    --- rl [next_M_M1] : M => X(M1) .
---    --- rl [next_M_M1] : M => X(M2) .

---    --- rl [and_M_M1_M2] : M => (M1) & (M1) .
---    --- rl [and_M_M1_M2] : M => (M2) & (M2) .

---    --- rl [and_M_M_M1] : M => (M) & (M1) .
---    --- rl [and_M_M1_M] : M => (M1) & (M) .

---    --- rl [and_M_M_M2] : M => (M) & (M2) .
---    --- rl [and_M_M2_M] : M => (M2) & (M) .

---    --- rl [and_M_M1_M2] : M => (M1) & (M2) .
---    --- rl [and_M_M2_M1] : M => (M2) & (M1) .



--- --- M1 : M2 M3 / M1 : M3 M2
---    --- rl [next_M_M1] : M1 => X(M2) .
---    --- rl [next_M_M1] : M1 => X(M3) .

---    --- rl [and_M_M1_M2] : M1 => (M2) & (M2) .
---    --- rl [and_M_M1_M2] : M1 => (M3) & (M3) .

---    --- rl [and_M_M_M1] : M1 => (M1) & (M2) .
---    --- rl [and_M_M1_M] : M1 => (M2) & (M1) .

---    --- rl [and_M_M_M2] : M1 => (M1) & (M3) .
---    --- rl [and_M_M2_M] : M1 => (M3) & (M1) .

---    --- rl [and_M_M1_M2] : M1 => (M2) & (M3) .
---    --- rl [and_M_M2_M1] : M1 => (M3) & (M2) .
   








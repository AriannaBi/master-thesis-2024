#include <iostream>
#include <spot/tl/parse.hh>
#include <spot/twaalgos/translate.hh>
#include <spot/twaalgos/hoa.hh>
#include <spot/twaalgos/dot.hh>
#include <spot/twaalgos/stats.hh>
#include <iostream>
#include <spot/tl/parse.hh>
#include <spot/tl/print.hh>
#include <spot/tl/simplify.hh>
#include <spot/tl/formula.hh>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <spot/tl/unabbrev.hh>
#include <bitset>
#include <set>
#include <spot/twaalgos/are_isomorphic.hh>
// #include "emptiness/test_emptiness_automata.hh"
#include <spot/parseaut/public.hh>

#include <spot/twaalgos/contains.hh>

// I saw print_spin_ltl in spot/tl/print.hh which Output an LTL formula as a string parsable by Spin.

// Test equivalences, equality and isomorphism of two automata. It reads two automatas in HOA format.
// read two hoa files and check if the two automata are equivalent.


// g++ -std=c++17 test_spot_spin_compare.cc -lspot -o test_spot_spin_compare -lbddx

// HOA_file.txt contains all the automatas generated by gen_AUT_spot_spin_one_formula.py
// HOA_not_isomorph.txt contains all the automatas that are not isomorphic, generated by 

// INPUT: HOA_aut
// OUTPUT: HOA_not_isomorph.txt

int compare_two_translators(std::string hoa_file) {
  // Open file
  int position_automata = 0;
  std::string automata_name_spot;
  std::string automata_name_spin;
  std::ifstream spot_file(hoa_file);
  if (!spot_file.is_open()) { // Check if the file is open
    std::cerr << "Error: Unable to open file." << std::endl;
    throw std::runtime_error("Error parsing hoa file");
    return -1;
  }

  if (std::filesystem::exists("files/HOA_not_isomorph.txt")) {
    remove("files/HOA_not_isomorph.txt");
  }

  std::ofstream file;
  file.open("files/HOA_not_isomorph.txt", std::ios::app);
  // Check if the file is open
  if (!file.is_open()) {
    std::cerr << "Unable to open file: " << "files/HOA_not_isomorph.txt" << std::endl;
    throw std::runtime_error("Error parsing hoa file");
    return -1;

  }

  // read the file and split it by ~
  std::string line;
  bool spot = true;
  std::string HOA_spot;
  std::string HOA_spin;
  std::vector<std::string> isomorphic_formulas;
  // read two by two automata, delimited with ~ and two automatas are separated by .
  int i = 0;
  std::string name_formula;
  int num_not_isomorphic = 0;
  int num_automatas = 0;
  int not_equivalent = 0;
  int num_not_equal = 0;
  while (std::getline(spot_file, line)) {
    if (line[0] == '~') {
      std::getline(spot_file, line);
      HOA_spot.erase(HOA_spot.size() - 1);
      HOA_spin.erase(HOA_spin.size() - 1);

      // save hoa to file
      std::ofstream spot_file("files/spot.hoa");
      spot_file << HOA_spot;
      // std::cout << HOA_spot << std::endl;
      spot_file.close();

      std::ofstream spin_file("files/spin.hoa");
      spin_file << HOA_spin;
      // std::cout << HOA_spin << std::endl;
      spin_file.close();


      auto dict = spot::make_bdd_dict();
      spot::parsed_aut_ptr spot_aut = parse_aut("files/spot.hoa", dict);
      spot::parsed_aut_ptr spin_aut = parse_aut("files/spin.hoa", dict);
      // std::cout << spot_aut->aut << spin_aut->aut << std::endl;

      // std::cout << spot::isomorphism_checker::are_isomorphic(spot_aut->aut, spin_aut->aut) << std::endl;
      // std::cout << spot::isomorphism_checker::are_isomorphic(spin_aut->aut, spin_aut->aut) << std::endl;

      position_automata++;
      if (spot::are_equivalent(spot_aut->aut, spin_aut->aut)){
        std::cout << "The two automata are equivalent "  << std::endl;
      } else {
        std::cout << "The two automata are not equivalent "  << std::endl;
        not_equivalent++;
      }

      // spot_aut->aut->is_empty USEFUL for emptiness checking

      if (!spot::isomorphism_checker::are_isomorphic(spot_aut->aut, spin_aut->aut)){
        // std::cout << "The two automata are NOT isomorphic " << name_formula << std::endl;
        // save the non isomorphic automatas because they are the one we will use for the checking module
        file << position_automata << '\n';
        file << HOA_spot;
        file << "\n.\n";
        file << HOA_spin;
        file << "\n~\n";
        num_not_isomorphic++;
      } else {
        std::cout << "The two automata are isomorphic " <<  name_formula <<  std::endl;
        isomorphic_formulas.insert(isomorphic_formulas.end(), name_formula);
      }


      // Test if they are equal 
      std::stringstream original_stream;
      std::string original_string = "";
      spot::const_twa_ptr twa_original = spot_aut->aut;
      const spot::const_twa_ptr& g_original = twa_original;

      std::stringstream mutant_stream;
      std::string mutation_string = "";
      spot::const_twa_ptr twa_mutant = spin_aut->aut;
      const spot::const_twa_ptr& g_mutant = twa_mutant;

      print_hoa(original_stream, g_original);
      print_hoa(mutant_stream, g_mutant);
      original_string = original_stream.str();
      mutation_string = mutant_stream.str();
      if (original_string != mutation_string) {
        // std::cout << "The two automata are not structurally equal " << '\n' << original_string << '\n' << mutation_string << std::endl;
        num_not_equal++;
      }

      std::cout << '\n' << std::endl;

      HOA_spin = "";
      HOA_spot = "";
      spot = true;
      i = 0;
      num_automatas++;
    }
    if (line[0] == '.') {
      spot = false;
    } else if (spot){
      HOA_spot += line +'\n';
      if (i == 1){
        name_formula = line;
      }
      i++;

    } else {
      HOA_spin += line +'\n';
    }
  }

  // std::cout << "Number of automatas: " << num_automatas << std::endl;
  // std::cout << "Number of non isomorphic automatas: " << num_not_isomorphic << std::endl;
  // std::cout << "Number of non equivalent automatas: " << not_equivalent << std::endl;
  // std::cout << "Number of non equal automatas: " << num_not_equal << std::endl;
  // std::cout << "Number of equal automatas: " << num_automatas - num_not_equal << std::endl;
  
  // std::cout << "Isomorphic formulas are : " << isomorphic_formulas.size() << std::endl;
  // // for (std::string elem : isomorphic_formulas) {
  // //   std::cout << elem << std::endl;
  // // }

  // double percentage_not_equal = static_cast<double>(num_not_equal) / num_automatas * 100;
  // std::cout << "Percentage of not equal automatas: " << percentage_not_equal << std::endl;
  // double percentage_equal = static_cast<double>(num_automatas - num_not_equal) / num_automatas * 100;
  // std::cout << "Percentage of  equal automatas: " << percentage_equal << std::endl;


  // double percentage_non = static_cast<double>(num_not_isomorphic) / num_automatas * 100;
  // std::cout << "Percentage of non isomorphic automatas: " << percentage_non  << std::endl;
  // double percentage_is = static_cast<double>(isomorphic_formulas.size()) / num_automatas * 100;
  // std::cout << "Percentage of isomorphic automatas: " << percentage_is << std::endl;

  // int num_automatas = 100;  // Example value
  // int num_not_isomorphic = 20;  // Example value
  // int not_equivalent = 10;  // Example value
  // int num_not_equal = 15;  // Example value
  // std::vector<int> isomorphic_formulas(80);  // Example value

  // Summary Information
  std::cout << "Summary of Automata Analysis" << std::endl;
  std::cout << "-----------------------------" << std::endl;
  std::cout << "Number of automatas: " << num_automatas << std::endl;
  std::cout << "Number of non-isomorphic automatas: " << num_not_isomorphic << std::endl;
  std::cout << "Number of non-equivalent automatas: " << not_equivalent << std::endl;
  std::cout << "Number of non-equal automatas: " << num_not_equal << std::endl;
  std::cout << "Number of equal automatas: " << (num_automatas - num_not_equal) << std::endl;
  std::cout << "Number of isomorphic formulas: " << isomorphic_formulas.size() << std::endl;
  std::cout << std::endl;

  // Percentages
  double percentage_not_equal = static_cast<double>(num_not_equal) / num_automatas * 100;
  double percentage_equal = static_cast<double>(num_automatas - num_not_equal) / num_automatas * 100;
  double percentage_non_isomorphic = static_cast<double>(num_not_isomorphic) / num_automatas * 100;
  double percentage_isomorphic = static_cast<double>(isomorphic_formulas.size()) / num_automatas * 100;

  std::cout << "Percentages" << std::endl;
  std::cout << "-----------" << std::endl;
  std::cout << "Percentage of not equal automatas: " << percentage_not_equal << "%" << std::endl;
  std::cout << "Percentage of equal automatas: " << percentage_equal << "%" << std::endl;
  std::cout << "Percentage of non-isomorphic automatas: " << percentage_non_isomorphic << "%" << std::endl;
  std::cout << "Percentage of isomorphic automatas: " << percentage_isomorphic << "%" << std::endl;


  if (remove("files/spin.hoa") != 0) {
    perror("Error deleting file");
  }
  if (remove("files/spot.hoa") != 0) {
    perror("Error deleting file");
  }

 
  return 0;
    
}




int main()
{

  compare_two_translators("files/HOA_aut.txt");



  return 0;

}